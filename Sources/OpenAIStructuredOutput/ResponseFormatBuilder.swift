import Foundation
import OpenAIChat
import OpenAICore

/// A utility struct for building OpenAI response format configurations.
///
/// `ResponseFormatBuilder` provides convenient methods to create `ResponseFormat`
/// objects with JSON structured output schemas. These formats can be used with
/// OpenAI's chat completion API to ensure responses conform to specific structures.
///
/// ## Example
/// ```swift
/// struct WeatherResponse: StructuredOutputConvertible {
///     let temperature: Double
///     let condition: String
///     static func generateStructuredOutput() -> [String: Any] {
///         // Schema definition
///     }
/// }
///
/// let format = ResponseFormatBuilder.buildResponseFormat(for: WeatherResponse.self)
/// ```
public struct ResponseFormatBuilder {

    /// Builds a response format for types conforming to `StructuredOutputConvertible`.
    ///
    /// This method creates a `ResponseFormat` object using the schema generated by
    /// the type's `generateStructuredOutput()` method.
    ///
    /// - Parameters:
    ///   - type: The type conforming to `StructuredOutputConvertible`
    ///   - strict: Whether to enforce strict schema validation (default: `true`)
    /// - Returns: A `ResponseFormat` configured with the type's JSON Schema
    ///
    /// ## Example
    /// ```swift
    /// let format = ResponseFormatBuilder.buildResponseFormat(
    ///     for: CustomResponse.self,
    ///     strict: true
    /// )
    /// ```
    public static func buildResponseFormat<T: StructuredOutputConvertible>(
        for type: T.Type,
        strict: Bool = true
    ) -> ResponseFormat {
        let schema = type.generateStructuredOutput()
        let jsonStructuredOutput = JSONStructuredOutput(
            name: type.structuredOutputName,
            structuredOutput: schema,
            strict: strict
        )

        return ResponseFormat(
            type: .jsonStructuredOutput,
            jsonStructuredOutput: jsonStructuredOutput
        )
    }

    /// Builds a response format from a custom schema dictionary.
    ///
    /// This method allows you to create a response format with a manually
    /// defined JSON Schema, providing maximum flexibility.
    ///
    /// - Parameters:
    ///   - name: The name for the response format
    ///   - schema: A dictionary representing the JSON Schema
    ///   - strict: Whether to enforce strict schema validation (default: `true`)
    /// - Returns: A `ResponseFormat` configured with the provided schema
    ///
    /// ## Example
    /// ```swift
    /// let schema: [String: Any] = [
    ///     "type": "object",
    ///     "properties": [
    ///         "message": ["type": "string"],
    ///         "success": ["type": "boolean"]
    ///     ],
    ///     "required": ["message", "success"]
    /// ]
    ///
    /// let format = ResponseFormatBuilder.buildResponseFormat(
    ///     name: "APIResponse",
    ///     schema: schema
    /// )
    /// ```
    public static func buildResponseFormat(
        name: String,
        schema: [String: Any],
        strict: Bool = true
    ) -> ResponseFormat {
        let jsonStructuredOutput = JSONStructuredOutput(
            name: name,
            structuredOutput: schema,
            strict: strict
        )

        return ResponseFormat(
            type: .jsonStructuredOutput,
            jsonStructuredOutput: jsonStructuredOutput
        )
    }

    /// Builds a response format for any Swift type using automatic schema generation.
    ///
    /// This method uses `StructuredOutputGenerator` to automatically generate
    /// a JSON Schema from the given type through reflection. This is useful
    /// for types that don't conform to `StructuredOutputConvertible`.
    ///
    /// - Parameters:
    ///   - type: Any Swift type to generate a schema for
    ///   - strict: Whether to enforce strict schema validation (default: `true`)
    /// - Returns: A `ResponseFormat` with an automatically generated schema
    ///
    /// ## Example
    /// ```swift
    /// struct SimpleResponse {
    ///     let id: Int
    ///     let name: String
    /// }
    ///
    /// let format = ResponseFormatBuilder.buildResponseFormat(
    ///     for: SimpleResponse.self
    /// )
    /// ```
    ///
    /// ## Note
    /// Automatic schema generation may not capture all constraints. For better
    /// control, consider implementing `StructuredOutputConvertible`.
    public static func buildResponseFormat<T>(
        for type: T.Type,
        strict: Bool = true
    ) -> ResponseFormat where T: Any {
        let schema = StructuredOutputGenerator.generateStructuredOutput(for: type)
        let name = String(describing: type)

        return buildResponseFormat(
            name: name,
            schema: schema,
            strict: strict
        )
    }
}
